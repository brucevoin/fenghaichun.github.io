---
layout: post
title: "一致性哈希算法及应用"
subtitle: ""
date: 2020-07-02
author: fenghaichun
category: 分布式理论
tags: 计算机
finished: true
---

## 概述

一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，初衷和CARP十分类似。一致性哈希修正了CARP使用的简单哈希算法带来的问题，使得DHT可以在P2P环境中真正得到应用。

## 哈希取模

一致性哈希算法是为了改进哈希取模算法的，哈希取模算法就不说了，直接说哈希取模的缺点.


以负载均衡为例，假如存在2个后端服务，那么以如下的公式路由用户的请求：

服务器编号=hash(请求ip) % 2，但是如果有一个后端服务器宕机了，那么将有一半的的请求失败；或者假如新增了一个后端服务器，那么除非能动态获取所有的服务器列表，否则新增的服务器将永远无法被访问到。


此外其他类似数据分片的路由也存在诸如此类的问题。

## 一致性哈希算法

简单说一致性哈希算法首先将可用的服务列表分配到一个”环“上，这个环的最小值是0，最大值是2的32次方，每个服务器在环上的位置通过下面的公式计算：

服务器在环上的位置=hash（服务器的IP地址） %  2^32

通过这个计算，每个服务器一定在[0,2^32]这个区间上。然后用户访问的时候不变，还是使用跟服务器相同的算法计算应该访问的环的位置，如果计算所得的位置刚好命中服务器的位置，那么直接访问，
否则顺时针旋转，碰到的第一个服务器作为目标服务器。

这样，如果新增或者撤销服务器实例，请求依然能计算出对应的服务器。但是假如每个服务器上的数据是不一样的（类似数据分片路由），那么依然存在问题，只不过问题影响的范围相对于之前的哈希取模要小。

## 数据倾斜问题

除了上面提到的数据分片路由问外，还有个哈希环的数据倾斜问题。

解决方案是给真实服务器增加一层虚拟服务节点，相当于给每个服务器创建了很多快捷方式，然后将这些快捷方式撒到哈希环上，以达到尽量均匀分配的目的。

