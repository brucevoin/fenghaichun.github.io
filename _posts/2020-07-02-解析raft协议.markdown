---
layout: post
title: "解析raft协议"
subtitle: ""
date: 2020-07-02
author: fenghaichun
category: 分布式理论
tags: 计算机
finished: true
---

# 解析raft协议

## 1. 什么是raft

raft是一个实现分布式系统一致性的协议，或者说raft是一个解决分布式系统中的一致性问题的协议。

## 2. 什么是分布式一致性

假设一个系统由3个节点组成，现在某客户端想要把a=8这个键值对写入这3个节点，如何保证写入成功后每个节点上的a的值都是8呢？

<img src="/img/image-20200902152117729.png" alt="image-20200902152117729" style="zoom:50%;" />

首先应该明确，必须从这3个节点中选出1个节点作为leader节点，所有客户端对系统的的更新操作都连接到leader节点，由leader节点负责数据的更新。这引出了第一个问题：如何选出leader节点？

## 3. 选主

raft协议规定每个节点只有三种状态（或者说角色），每个节点每时每刻只有这三种状态中的一个状态，并随着与其他节点信息沟通改变自己的状态。这三种状态如下：

- follower
- cadidate
- leader

每个节点处于不同的状态下的行为也不同：

- follower状态：
  - 接收处于leader的心跳并安装心跳信息写日志或者提交数据
  - 如果在选举超时时间内收到心跳则重置选举超时时间，否则将自身调整为cadidate状态
  - 接收并响应新任期的选举投票
- cadidate状态：
  - 发起新一任期的选举，给自己投票并给其他节点发送新任期的选举投票请求
  - 如果收到了大多数节点的投票，则将自身状态调整未leader
- leader状态：
  - 发送心跳给所有的follower节点
  - 处理客户端的更新操作

### 3.1 选主流程

1. 初始状态：所有的节点都是follower状态，每个节点都有一个选举超时时间（随机的between 150ms and 300ms），从未收到leader心跳时间算起，如果当前时间到达了选举超时时间，则节点进入cadidate状态。
2. 新任期的选举：进入cadidate状态的节点发起新任期的选举，它首先给自己投票，然后向其他节点发送投票请求，如果收到了大多数节点的投票，则自身成为leader状态，开始发送leader心跳给其他节点。
3. 新任期的选举期间的其他节点：收到某个节点的投票请求后，节点先判断自己在这个投票请求的任期内是否有投过票，如果没有则进行投票，否则忽略，同时重置自身的选举超时时间。

### 3.2 如何避免脑裂

假设有4个节点，其中两个节点恰好同时到达选举超时时间并成为cadidate发起选举，假设每个cadidate都收到了一个不同的节点的投票，也就是说每个cadidate都得到了2票，那么该任期内无法达到“大多数”的条件，选主失败，然后所有节点就会等到选举超时时间然后重新发起选举。

## 4. 数据写入

### 4.1 数据写入流程

在容忍一定程度的副本不一致情况下，客户端的读请求可以发送给任意节点，但是客户端的写请求必须通过leader节点写入。下面梳理下数据写入的流程。

1. 客户端连接leader并发出写请求（如果连接的不是leader可以转发给leader），leader将写请求写入日志（不提交），并在下一次发送心跳的时候将写请求发送给其他节点，然后接收follower节点的写入回复。
2. follower节点收到leader节点的写请求后，也先将写请求写入日志，然后回复写入日志成功。
3. leader节点收到大多数的节点的写入日志成功回复后提交本节点的数据并返回客户端写入成功，然后在下一次心跳时通知follower提交写请求。
4. follower节点收到leader节点的提交通知后提交自己节点上的数据。

### 4.2 如何处理网络分区问题

假设有5个节点，leader跟另外一个follower处于一个分区，其他三个节点在一个分区，那么其他三个节点会选出一个leader，这样，整个系统存在两个leader（处于不同的任期）：

<img src="/img/image-20200902145228462.png" alt="image-20200902145228462" style="zoom:50%;" />



此时假如有客户端连接到了NodeB并尝试写入数据，会发现不能成功，因为只有两个节点不能达到“大多数”的原则条件。

但是假如有客户端连接到了NodeC并尝试写入数据，则写入会成功，因为三个节点达到了“大多数”的条件。

当网络恢复后，NodeB收到NodeC的心跳发现自己的任期已经落后，则放弃自己的leader状态并成为follower，Node A、B将回退自己未提交的日志并以Node C的日志为准。此时整个系统达到了一致性的要求。

