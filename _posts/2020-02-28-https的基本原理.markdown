---
layout: post
title: "如何买到靠谱的药"
subtitle: "以下内容不适合信奉中医的人士阅读"
date: 2020-02-28
author: fenghaichun
category: other
tags: 生活
finished: true
---


## 总体概述

https（全称：Hyper Text Transfer Protocol over SecureSocket Layer，常称为HTTP over TLS、HTTP over SSL或HTTP Secure）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，但利用SSL/TLS来加密数据包。

那么什么是SSL/TLS呢？SSL/TLS的中文是传输层安全性协议（英语：Transport Layer Security，缩写：TLS）及其前身安全套接层（英语：Secure Sockets Layer，缩写：SSL）是一种安全协议，目的是为互联网通信提供安全及数据完整性保障。

作为一种协议，SSL/TLS处于传输层与应用层之间，且对于应用层来说是透明的，SSL包含记录层（Record Layer）和传输层，记录层协议确定传输层数据的封装格式。传输层安全协议使用X.509认证，之后利用非对称加密演算来对通信方做身份认证，之后交换对称密钥作为会谈密钥（Session key）。这个会谈密钥是用来将通信两方交换的数据做加密，保证两个应用间通信的保密性和可靠性，使客户与服务器应用之间的通信不被攻击者窃听。

具体怎么做呢？

- 当客户端连接到支持TLS协议的服务器要求创建安全连接并列出了受支持的密码组合（加密密码算法和加密哈希函数），握手开始。
- 服务器从该列表中决定加密和散列函数，并通知客户端。
- 服务器发回其数字证书，此证书通常包含服务器的名称、受信任的证书颁发机构（CA）和服务器的公钥。
- 客户端确认其颁发的证书的有效性。
- 为了生成会话密钥用于安全连接，客户端使用服务器的公钥加密随机生成的密钥，并将其发送到服务器，只有服务器才能使用自己的私钥解密。
- 服务器使用自己的私钥拿到作为密钥的随机数，双方生成用于加密和解密的对称密钥。

这就是TLS协议的握手，握手完毕后的连接是安全的（后续数据的传输都回使用那个随机生成的对称密钥进行加密），直到连接（被）关闭。如果上述任何一个步骤失败，TLS握手过程就会失败，并且断开所有的连接。

意思就是https的大致原理，要再深入理解需要学习以下几点知识。

## 对称加密与非对称加密

### 对称加密
对称加密就是加密跟解密使用同一个密钥，其优点是简单、性能高。

### 非对称加密
非对称加密的密钥有两个（一般称为密钥对）：公钥、私钥，其中公钥加密的东西可以用私钥解密，通知私钥加密的东西可以用公钥解密。后续会看到非对称加密的这个特点非常有用，但是其缺点是加密解密的性能相比对称加密低效。

### 数字签名
数字签名的要求是，只有我自己能签我的名字，其他人能验证我的签名，但是不能伪造我的签名。

我们知道，公钥加密系统里面，使用公钥加密，就可以使用私钥来解密；使用私钥加密，也可以使用公钥来解密。消息加密利用的是前者，数字签名利用的是后者。

用私钥对消息进行加密，得到密文，其实就是一个签名的过程。因为私钥顾名思义是私密的，而且是唯一的，只有我自己知道，别人无法在不知道我的私钥的情况下模仿我的签名（不可伪造）。而公钥是公开的，其他人可以很容易地使用公钥去尝试解密生成的密文，然后就可以知道这个签名是不是我签的（不可抵赖）。

当然，在数字签名的过程中，对原文的保密性没有要求，所以加密、解密这样的名词在这个场景中并不准确，用签名和解签会更合适。

实际应用中，由于直接对原消息进行签名有安全性问题，而且原消息往往比较长，直接使用RSA算法进行签名速度会比较慢，所以我们一般对消息计算其摘要（比如SHA-256等），然后对摘要进行签名。只要使用的摘要算法是安全的（MD5、SHA-1已经不安全了），那么这种方式的数字签名就是安全的。

## 加密通信的主要问题
不管是对称加密还是非对称加密，具体在加密通信的应用上最难解决的问题是：如何传递密钥？

比如客户端使用对称加密算法加密了数据发送给服务器，那么未来让服务器能够解密数据，解密需要的密钥如何给服务器呢？总不能发送数据的同时把密钥也带上吧？先发送加密数据，完了再发送密钥？也不行，窃听你的人先接收你的密文，然后再等你发密钥，拿到密钥就等于拿到了你发送的数据。

那使用非对称加密呢？比如客户端要向服务器发送数据，首先客户端告诉服务器自己的公钥，服务器收到后回复自己的公钥，然后发送数据时客户端使用自己的私钥对数据进行签名，然后使用服务器的公钥对数据进行加密，然后发送给服务器，服务器使用自己的私钥解密数据，并使用客户端的公钥进行签名验证，由于别人不知道客户端跟服务器的私钥，所以解密跟验证签名都是安全。

但上面最大的漏洞是如何安全的交货公钥，跟对称加密稍微有点不同，这里主要的问题是防伪，也就是说假如交换公钥时服务器实际上是个假的怎么办？

这时候就需要引入数字证书。


## 数字证书

从现实世界来说，数字证书相当于给每个人签发身份证的公安局或者其他公认的权威机构，比如当你去酒店住宿时酒店需要确认你的身份，而你也需要确认酒店是不是假的，这时候你拿出酒店认可的身份证，酒店可以拿出自己的营业执照，然后酒店可以拿着你的身份证去公安局验证你的身份信息（以及证件的真伪），你也可以拿着酒店的营业执照去工商局验证酒店的信息。

从技术上来说，数字证书就是一个客户端跟服务器都信任的另一个服务器，客户端跟服务器都可以提交自己的公钥给这个服务器，然后这个服务器会给他们发一个类似身份证的数字证书，当然，在互联网领域，一般只需要服务器去申请证书。

###  数字证书的颁发
具体来说就是，服务器向CA机构的服务器发送自己的公钥申请证书，CA结构的服务器生成一个文件，里边大致包含：你的服务器的公钥、证书到期时间、证书颁发者、你的服务器的加密算法、你的服务器的hash算法等，然后CA的服务器用自己的私钥对这个文件进行签名，签名后的这个文件就是你的服务器的数字证书。

### 数字证书的使用

在客户端跟服务器开始通信的时候，服务器发送自己的数字签名给客户端，客户端拿到这个数字证书后使用CA服务器的公钥进行签名验证，验证该证书确实是所声称的那个CA机构所签发的，最后客户端拿到服务器的公钥。

### CA机构的信任问题
客户端跟服务器如何确认CA机构服务器的真假？

CA机构是有多个的，并且其之间的关系是树结构，上级可以给下级颁发证书。要验证某个CA机构的真伪，只能拿这个CA机构的证书到其所属的上级去验证。最终会存在一个根节点，那根节点的真伪如何确认呢？答案是无条件信任。这跟现实社会类似，要验证派出所是不是真的，要去所属公安局验证，要验证公安局是不是真的要去公安厅验证。。。。最终会到国家最高机构，而国家最高机构的权威你只能无条件信任。


## SSL/TLS 四次握手

理解了以上内容，那么所谓四次握手就比较简单了：

-  客户端->服务器：我要跟你通信，你证书多少？
-  客户端<-服务器：好的，这是我的证书
-  客户端（验证证书、提取服务器公钥、生成用于通信加密的对称密钥，然后使用服务器的公钥对密钥加密）-> 我们就用这个密钥通信吧（密文）
-  客户端<-服务器：好的。

之后他们就可以放心大胆的的使用密钥加密数据进行通信了。
