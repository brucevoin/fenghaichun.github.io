---
layout: post
title: "零拷贝基本原理"
subtitle: ""
date: 2020-03-02
author: fenghaichun
category: computer
tags: 计算机
finished: true
---

# 理解零拷贝
## 一些概念
### 直接IO
linux提供的的系统API。
### 缓冲IO
C语言库函数提供的接口。
### 应用程序内存
是通常写代码用malloc/free、new/delete等分配出来的内存。
### 内核缓冲区
为了加快磁盘的I/O，Linux系统会把磁盘上的数据以Page为单位缓存在操作系统的内存里，这里的Page是Linux系统定义的一个逻辑概念，一个Page一般为4K。
### 用户缓冲区
C语言的FILE结构体里面的buffer。FILE结构体的定义如下，可以看到里面有定义的buffer；

## 直接IO与缓冲IO文件的读写过程
- 缓冲IO：磁盘<->内核缓冲区<->用户缓冲区<->应用程序缓冲区
- 直接IO：磁盘<->内核缓冲区<->应用程序缓冲区

可以看到，无论是缓冲IO还是直接IO，文件的读写都要经历多次的拷贝。

## 内存映射文件
内存映射文件在直接IO的基础上更进一步，用户空间不申请物理内存，而是通过使用内存逻辑地址直接使用内核物理内存。
读写文件的过程：

磁盘<->内核缓冲区
## 零拷贝
零拷贝主要解决的是用户需要把磁盘上的文件里的数据发送到网络的场景的性能问题，针对这个场景，我们尝试使用上面描述的技术来解决：

- 使用直接IO:   磁盘->内核缓冲区->应用程序内存->socket缓冲区->网络
- 使用内存映射文件:   磁盘->内核缓冲区->socket缓冲区->网络

以上两种方式都存在至少一次的内存拷贝，那么能不能再进一步减少拷贝呢？那就是零拷贝技术。

零拷贝的实现思路跟内存映射文件类似，通过建立内核缓冲区跟网卡缓冲区的映射，在内核缓冲区和Socket缓冲区之间并没有做数据拷贝，只是一个地址的映射，底层的网卡驱动程序要读取数据并发送到网络的时候，看似读的是Socket缓冲区的数据，但实际上直接读的是内核缓冲区中的数据。过程如下：

磁盘->内核缓冲区->网络

可以发现其实还是存在数据拷贝，但是仅仅存在于磁盘到内核、内核到网络的数据库拷贝，整个过程中当数据进入内存后就不用再拷贝，这也是零拷贝这个名称的来源。


